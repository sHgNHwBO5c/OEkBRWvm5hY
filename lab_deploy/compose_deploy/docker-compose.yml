version: "3.9"

services:

  gitea:
    image: gitea/gitea:1.20
    hostname: gitea
    container_name: gitea
    environment:
      - "USER_UID=${USER_UID}"
      - "USER_GID=${USER_GID}"
      - "ROOT_URL=${ROOT_URL}"
      - "DB_TYPE=${DB_TYPE}"
      - "DB_HOST=${DB_HOST}"
      - "DB_NAME=${DB_NAME}"
      - "DB_USER=${DB_USER}"
      - "DB_PASSWD=${DB_PASSWD}"
      - "SKIP_TLS_VERIFY=true"
      - "GITEA__metrics__ENABLED=true"
      - "GITEA__metrics__TOKEN=${GITEA_METRICS_API_TOKEN}"
      - "GITEA__webhook__ALLOWED_HOST_LIST=${GITEA_WEBHOOK_ALLOWED_HOST_LIST}"
    restart: always
    volumes:
      - ./volumes/gitea-app:/data
    depends_on:
      - gitea-db
    ports:
      - "4070:22"
      - "3000:3000"

  gitea-db:
    image: postgres:15-alpine3.18
    hostname: postgres
    container_name: gitea-db
    ports:
      - 5432:5432
    restart: always
    volumes:
      - ./volumes/gitea-db:/var/lib/postgresql/data
    environment:
      - "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}"
      - "POSTGRES_DB=${POSTGRES_DB}"

  drone:
    image: drone/drone:2.18.0
    hostname: drone
    container_name: drone
    ports:
      - 8000:8000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./volumes/drone:/var/lib/drone/
    restart: always
    depends_on:
      - gitea
    environment:
      - "DRONE_AGENTS_ENABLED=${DRONE_AGENTS_ENABLED}"
      - "DRONE_GITEA_CLIENT_ID=${DRONE_GITEA_CLIENT_ID}"
      - "DRONE_GITEA_CLIENT_SECRET=${DRONE_GITEA_CLIENT_SECRET}"
      - "DRONE_GITEA_SERVER=${DRONE_GITEA_SERVER}"
      - "DRONE_GIT_ALWAYS_AUTH=${DRONE_GIT_ALWAYS_AUTH}"
      - "DRONE_TLS_AUTOCERT=${DRONE_TLS_AUTOCERT}"
      - "DRONE_SERVER_PORT=${DRONE_SERVER_PORT}"
      - "DRONE_SERVER_HOST=${DRONE_SERVER_HOST}"
      - "DRONE_SERVER_PROTO=${DRONE_SERVER_PROTO}"
      - "DRONE_RPC_SECRET=${DRONE_RPC_SECRET}"
      - "DRONE_RUNNER_NETWORKS=${DRONE_RPC_SECRET}"
      - "DRONE_USER_CREATE=${DRONE_USER_CREATE}"

  drone-runner-docker:
    image: drone/drone-runner-docker:1.8.3
    hostname: drone-runner
    container_name: drone-runner
    restart: always
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
    depends_on:
      - drone
      - gitea
    environment:
      - "DRONE_RPC_HOST=${DRONE_RPC_HOST}"
      - "DRONE_RPC_PROTO=${DRONE_RPC_PROTO}"
      - "DRONE_RPC_SECRET=${DRONE_RPC_SECRET}"
      - "DRONE_RUNNER_NAME=${DRONE_RUNNER_NAME}"
      - "DRONE_UI_USERNAME=${DRONE_UI_USERNAME}"
      - "DRONE_UI_PASSWORD=${DRONE_UI_PASSWORD}"
      - "DRONE_RUNNER_NETWORKS=${DRONE_RUNNER_NETWORKS}"

  dvwa:
    image: vulnerables/web-dvwa:latest
    restart: always
    hostname: dvwa
    container_name: dvwa
    ports:
     - "9090:80"

  vault:
    image: vault:1.13.1
    restart: always
    hostname: vault
    container_name: vault
    cap_add:
     - IPC_LOCK
    ports:
     - "7880:7880"
    environment:
     - "VAULT_DEV_ROOT_TOKEN_ID=${VAULT_ROOT_TOKEN}"
     - "VAULT_DEV_LISTEN_ADDRESS=${VAULT_URL}"

  swagger:
    image: swaggerapi/petstore:latest
    restart: always
    hostname: swagger
    container_name: swagger
    environment:
     - "SWAGGER_HOST=${SWAGGER_URL}"
     - "SWAGGER_URL=${SWAGGER_URL}"
     - "SWAGGER_BASE_PATH=/myapi"
    ports:
     - "8082:8080"

  prometheus:
    image: prom/prometheus:main
    restart: always
    container_name: prometheus
    depends_on:
     - gitea
     - drone
    volumes:
     - './volumes/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml'
     - './volumes/prometheus-storage:/prometheus'
    ports:
     - "9091:9090"
    user: ${CURRENT_UID}

  grafana:
    image: grafana/grafana-oss:main
    restart: always
    depends_on:
     - prometheus
    container_name: grafana
    ports:
     - "3001:3000"
    volumes:
    - './volumes/grafana/provisioning:/etc/grafana/provisioning'
    - './volumes/grafana/dashboards:/var/lib/grafana/dashboards'
    - './volumes/grafana-storage:/var/lib/grafana'
    - './volumes/grafana/plugins:/var/lib/grafana/plugins'
    user: ${CURRENT_UID}

  splunk:
    image: splunk/splunk:latest
    restart: always
    mem_limit: 512m
    cpus: 1
    hostname: splunk
    container_name: splunk
    environment:
     - "SPLUNK_PASSWORD=${SPLUNK_PASSWORD}"
     - "SPLUNK_START_ARGS=--accept-license"
     - "SPLUNK_LICENSE_URI=Free"
    ports:
     - "8020:8000"
    volumes:
     - './volumes/splunk/etc:/opt/splunk/etc'
     - './volumes/splunk/var:/opt/splunk/var'

volumes:
  gitea-app:
  gitea-db:
  grafana-storage:
  prometheus-storage:
  splunk:
